const admin = require('firebase-admin');
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∫–ª—é—á—É (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
const serviceAccount = require('../serviceAccountKey.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function uploadLeadersExtended() {
  try {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤ –≤ Firestore...');
    
    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ª–∏–¥–µ—Ä–∞–º–∏
    const leadersPath = path.join(process.cwd(), 'public', 'history', 'leaders_extended.json');
    const leadersData = JSON.parse(fs.readFileSync(leadersPath, 'utf8'));
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${leadersData.options.length} –ª–∏–¥–µ—Ä–æ–≤`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ª–∏–¥–µ—Ä–∞ –≤ Firestore
    for (const leader of leadersData.options) {
      try {
        await db.collection('leaders').doc(leader.id).set(leader);
        console.log(`‚úì –ó–∞–≥—Ä—É–∂–µ–Ω –ª–∏–¥–µ—Ä: ${leader.name} (${leader.id})`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–¥–µ—Ä–∞ ${leader.id}:`, error.message);
      }
    }
    
    console.log('\n‚úÖ –í—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Firestore!');
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤: ${leadersData.options.length}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤:', error);
    process.exit(1);
  }
}

uploadLeadersExtended(); 