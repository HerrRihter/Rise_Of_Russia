const admin = require('firebase-admin');
const fs = require('fs');
const path = require('path');
const { getFirestore, collection, doc, setDoc } = require('firebase-admin/firestore');

// –ü—É—Ç—å –∫ —Å–µ—Ä–≤–∏—Å–Ω–æ–º—É –∫–ª—é—á—É (–≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞)
const serviceAccount = require('../serviceAccountKey.json');

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = getFirestore();

async function uploadLeadersExtended() {
  try {
    // console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤ –≤ Firestore...');
    
    const leadersFilePath = path.join(__dirname, '..', 'public', 'history', 'leaders_extended.json');
    const leadersFileContent = await fs.promises.readFile(leadersFilePath, 'utf8');
    const leadersData = JSON.parse(leadersFileContent);

    if (!leadersData || !leadersData.options || !Array.isArray(leadersData.options)) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ leaders_extended.json. –û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º "options" (–º–∞—Å—Å–∏–≤).');
    }

    // console.log(`–ù–∞–π–¥–µ–Ω–æ ${leadersData.options.length} –ª–∏–¥–µ—Ä–æ–≤`);
    const leadersCollection = collection(db, 'leaders');
    
    for (const leader of leadersData.options) {
      const docRef = doc(leadersCollection, leader.id);
      await setDoc(docRef, leader);
      // console.log(`‚úì –ó–∞–≥—Ä—É–∂–µ–Ω –ª–∏–¥–µ—Ä: ${leader.name} (${leader.id})`);
    }

    // console.log('\n‚úÖ –í—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Firestore!');
    // console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ª–∏–¥–µ—Ä–æ–≤: ${leadersData.options.length}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–∏–¥–µ—Ä–æ–≤:', error);
    process.exit(1);
  }
}

uploadLeadersExtended(); 