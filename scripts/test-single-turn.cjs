const fs = require('fs');
const { optimizeTurnStructure } = require('./optimize-turns-structure.cjs');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ö–æ–¥–∞
function testSingleTurnOptimization(inputPath, turnIndex = 0) {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ —Ö–æ–¥–∞...');
  
  try {
    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const inputContent = fs.readFileSync(inputPath, 'utf8');
    const lines = inputContent.split('\n').filter(line => line.trim());
    
    if (lines.length === 0) {
      console.error('‚ùå –§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
      return;
    }
    
    if (turnIndex >= lines.length) {
      console.error(`‚ùå –ò–Ω–¥–µ–∫—Å ${turnIndex} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ (${lines.length})`);
      return;
    }
    
    // –ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ö–æ–¥–∞
    const originalTurn = JSON.parse(lines[turnIndex]);
    console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞: ${originalTurn.title || originalTurn.id}`);
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const optimizedTurn = optimizeTurnStructure(originalTurn);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const outputPath = `test_turn_${turnIndex}_optimized.json`;
    fs.writeFileSync(outputPath, JSON.stringify(optimizedTurn, null, 2), 'utf8');
    
    // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log(`   ‚Ä¢ –°–ª–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: ${originalTurn.sections.reduce((acc, s) => acc + s.content.split(' ').length, 0)}`);
    console.log(`   ‚Ä¢ –°–ª–æ–≤ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${optimizedTurn.metadata.word_count}`);
    console.log(`   ‚Ä¢ –°–µ–∫—Ü–∏–π: ${optimizedTurn.metadata.sections_count}`);
    console.log(`   ‚Ä¢ –ß–∞–Ω–∫–æ–≤: ${optimizedTurn.content.chunks.length}`);
    console.log(`   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π: ${optimizedTurn.indexes.entities.people.length}`);
    console.log(`   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: ${optimizedTurn.indexes.entities.organizations.length}`);
    console.log(`   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π: ${optimizedTurn.indexes.entities.locations.length}`);
    console.log(`   ‚Ä¢ –¢–µ–º: ${optimizedTurn.indexes.themes.length}`);
    console.log(`   ‚Ä¢ –û–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${optimizedTurn.analysis.sentiment}`);
    
    // –í—ã–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–º
    console.log('\nüéØ –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã:');
    optimizedTurn.indexes.themes.slice(0, 5).forEach(theme => {
      console.log(`   ‚Ä¢ ${theme.theme}: ${Math.round(theme.relevance * 100)}%`);
    });
    
    // –í—ã–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π
    console.log('\nüë• –ö–ª—é—á–µ–≤—ã–µ –ª—é–¥–∏:');
    optimizedTurn.indexes.entities.people.slice(0, 5).forEach(person => {
      console.log(`   ‚Ä¢ ${person}`);
    });
    
    console.log('\nüè¢ –ö–ª—é—á–µ–≤—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:');
    optimizedTurn.indexes.entities.organizations.slice(0, 5).forEach(org => {
      console.log(`   ‚Ä¢ ${org}`);
    });
    
    console.log('\nüìç –ö–ª—é—á–µ–≤—ã–µ –ª–æ–∫–∞—Ü–∏–∏:');
    optimizedTurn.indexes.entities.locations.slice(0, 5).forEach(location => {
      console.log(`   ‚Ä¢ ${location}`);
    });
    
    // –í—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —á–∞–Ω–∫–æ–≤
    console.log('\nüì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —á–∞–Ω–∫–æ–≤:');
    optimizedTurn.content.chunks.slice(0, 3).forEach((chunk, index) => {
      console.log(`   ‚Ä¢ –ß–∞–Ω–∫ ${index + 1}: ${chunk.tokens_estimate} —Ç–æ–∫–µ–Ω–æ–≤, ${chunk.sentiment} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ`);
    });
    
    console.log(`\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${outputPath}`);
    
    return optimizedTurn;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä
function compareStructures(original, optimized) {
  console.log('\nüîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä:');
  
  const comparison = {
    original_size: JSON.stringify(original).length,
    optimized_size: JSON.stringify(optimized).length,
    size_reduction: 0,
    added_features: [],
    improved_accessibility: []
  };
  
  // –†–∞—Å—á–µ—Ç —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
  comparison.size_reduction = Math.round(
    (1 - comparison.optimized_size / comparison.original_size) * 100
  );
  
  // –ê–Ω–∞–ª–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  if (optimized.indexes) comparison.added_features.push('–ò–Ω–¥–µ–∫—Å—ã —Å—É—â–Ω–æ—Å—Ç–µ–π');
  if (optimized.analysis) comparison.added_features.push('–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è');
  if (optimized.content.chunks) comparison.added_features.push('–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏');
  if (optimized.indexes.themes) comparison.added_features.push('–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º');
  
  // –ê–Ω–∞–ª–∏–∑ —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
  if (optimized.metadata) comparison.improved_accessibility.push('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ');
  if (optimized.content.key_points) comparison.improved_accessibility.push('–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã');
  if (optimized.analysis.key_themes) comparison.improved_accessibility.push('–ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã');
  
  console.log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${comparison.original_size} —Å–∏–º–≤–æ–ª–æ–≤`);
  console.log(`   ‚Ä¢ –†–∞–∑–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: ${comparison.optimized_size} —Å–∏–º–≤–æ–ª–æ–≤`);
  console.log(`   ‚Ä¢ –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞: ${comparison.size_reduction}%`);
  
  console.log('\n‚ú® –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
  comparison.added_features.forEach(feature => {
    console.log(`   ‚Ä¢ ${feature}`);
  });
  
  console.log('\nüöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å:');
  comparison.improved_accessibility.forEach(improvement => {
    console.log(`   ‚Ä¢ ${improvement}`);
  });
  
  return comparison;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const inputPath = process.argv[2] || 'd:/Downloads/turns_hierarchical.jsonl';
  const turnIndex = parseInt(process.argv[3]) || 0;
  
  if (!fs.existsSync(inputPath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${inputPath}`);
    console.log('\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
    console.log('   node test-single-turn.js <input_file> [turn_index]');
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä:');
    console.log('   node test-single-turn.js d:/Downloads/turns_hierarchical.jsonl 0');
    process.exit(1);
  }
  
  // –ß—Ç–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ö–æ–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const inputContent = fs.readFileSync(inputPath, 'utf8');
  const lines = inputContent.split('\n').filter(line => line.trim());
  const originalTurn = JSON.parse(lines[turnIndex]);
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  const optimizedTurn = testSingleTurnOptimization(inputPath, turnIndex);
  
  if (optimizedTurn) {
    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä
    compareStructures(originalTurn, optimizedTurn);
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  } else {
    console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π');
    process.exit(1);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  testSingleTurnOptimization,
  compareStructures
};

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
} 