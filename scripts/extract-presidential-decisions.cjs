const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const timelinePath = path.join(__dirname, 'full_processed', 'turns_processed_2025-06-20T05-35-54-269Z_final.json');
const outputPath = path.join(__dirname, 'presidential_decisions.json');

// –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ö–æ–¥–∞–º–∏
const timelineData = JSON.parse(fs.readFileSync(timelinePath, 'utf-8'));
const timeline = timelineData.turns; // –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞
function extractPresidentialDecisions() {
  const decisions = [];
  
  timeline.forEach(turn => {
    const turnId = turn.turn_id;
    const date = turn.metadata ? turn.metadata.date : null;
    
    // –ò—â–µ–º presidential_options –≤ —Å–µ–∫—Ü–∏—è—Ö
    if (turn.content && turn.content.sections) {
      Object.values(turn.content.sections).forEach(section => {
        if (section.chunks) {
          section.chunks.forEach(chunk => {
            if (chunk.presidential_options && chunk.presidential_options.content) {
              const content = chunk.presidential_options.content;
              
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å —à–∫–∞–ª—ã
              const balanceMatch = content.match(/–ë–∞–ª–∞–Ω—Å[:\s]*([+-]?\d+)/);
              const balance = balanceMatch ? balanceMatch[1] : '0';
              
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
              const contextMatch = content.match(/\*\*–ö–æ–Ω—Ç–µ–∫—Å—Ç:\*\*([^*]+)/);
              const context = contextMatch ? contextMatch[1].trim() : '';
              
              // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏–π
              const options = [];
              const optionMatches = content.matchAll(/\*\*([^*]+)\*\*[^üìå]*üìå\*\* –ò—Ç–æ–≥:\*\*([^]*?)(?=\*\*[^*]+\*\*|$)/g);
              
              for (const match of optionMatches) {
                const optionTitle = match[1].trim();
                const optionContent = match[2].trim();
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∏ –∏—Ç–æ–≥–∏
                const actionsMatch = optionContent.match(/\*\*–î–µ–π—Å—Ç–≤–∏—è:\*\*([^üìå]*)/);
                const actions = actionsMatch ? actionsMatch[1].trim() : '';
                
                const resultMatch = optionContent.match(/\*\*üìå –ò—Ç–æ–≥:\*\*([^]*?)(?=\*\*[^*]+\*\*|$)/);
                const result = resultMatch ? resultMatch[1].trim() : '';
                
                options.push({
                  title: optionTitle,
                  actions: actions,
                  result: result
                });
              }
              
              decisions.push({
                turn_id: turnId,
                date: date,
                balance: balance,
                context: context,
                options: options,
                raw_content: content
              });
            }
          });
        }
      });
    }
    
    // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –≤ key_points
    if (turn.content && turn.content.sections) {
      Object.values(turn.content.sections).forEach(section => {
        if (section.key_points) {
          const presidentialMentions = section.key_points.filter(point => 
            point.toLowerCase().includes('–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç') || 
            point.toLowerCase().includes('–ø—É—Ç–∏–Ω') ||
            point.toLowerCase().includes('–∫—Ä–µ–º–ª—å') ||
            point.toLowerCase().includes('–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞')
          );
          
          if (presidentialMentions.length > 0) {
            decisions.push({
              turn_id: turnId,
              date: date,
              type: 'mentions',
              mentions: presidentialMentions
            });
          }
        }
      });
    }
  });
  
  return decisions;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–µ—à–µ–Ω–∏–π
function analyzeDecisionPatterns(decisions) {
  const analysis = {
    total_decisions: decisions.length,
    balance_distribution: {},
    common_themes: [],
    decision_evolution: []
  };
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
  decisions.forEach(decision => {
    if (decision.balance) {
      const balance = decision.balance;
      analysis.balance_distribution[balance] = (analysis.balance_distribution[balance] || 0) + 1;
    }
  });
  
  // –ê–Ω–∞–ª–∏–∑ –æ–±—â–∏—Ö —Ç–µ–º
  const themes = new Set();
  decisions.forEach(decision => {
    if (decision.context) {
      const contextLower = decision.context.toLowerCase();
      if (contextLower.includes('–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å') || contextLower.includes('—Ç–µ—Ä—Ä–æ—Ä')) themes.add('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å');
      if (contextLower.includes('—ç–∫–æ–Ω–æ–º–∏–∫') || contextLower.includes('–±–∏–∑–Ω–µ—Å')) themes.add('–≠–∫–æ–Ω–æ–º–∏–∫–∞');
      if (contextLower.includes('–ø–æ–ª–∏—Ç–∏–∫') || contextLower.includes('–≤–ª–∞—Å—Ç—å')) themes.add('–ü–æ–ª–∏—Ç–∏–∫–∞');
      if (contextLower.includes('–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω') || contextLower.includes('–≤–Ω–µ—à–Ω')) themes.add('–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è');
      if (contextLower.includes('—Ä–µ–≥–∏–æ–Ω') || contextLower.includes('–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä')) themes.add('–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞');
    }
  });
  analysis.common_themes = Array.from(themes);
  
  // –≠–≤–æ–ª—é—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  decisions.forEach(decision => {
    if (decision.date) {
      analysis.decision_evolution.push({
        date: decision.date,
        turn_id: decision.turn_id,
        balance: decision.balance,
        context_summary: decision.context ? decision.context.substring(0, 100) + '...' : ''
      });
    }
  });
  
  return analysis;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞...');
  
  const decisions = extractPresidentialDecisions();
  const analysis = analyzeDecisionPatterns(decisions);
  
  const result = {
    metadata: {
      total_decisions: decisions.length,
      extraction_date: new Date().toISOString(),
      source_file: timelinePath
    },
    analysis: analysis,
    decisions: decisions
  };
  
  // –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  fs.writeFileSync(outputPath, JSON.stringify(result, null, 2), 'utf-8');
  
  console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞: ${decisions.length}`);
  console.log(`üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:`, analysis.balance_distribution);
  console.log(`üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:`, analysis.common_themes.join(', '));
  console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞
  const reportPath = path.join(__dirname, 'presidential_decisions_report.md');
  let report = `# –û—Ç—á–µ—Ç –ø–æ —Ä–µ—à–µ–Ω–∏—è–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞

## –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π**: ${decisions.length}
- **–ü–µ—Ä–∏–æ–¥**: ${decisions.length > 0 ? decisions[0].date : 'N/A'} - ${decisions.length > 0 ? decisions[decisions.length - 1].date : 'N/A'}

## –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –±–∞–ª–∞–Ω—Å—É —à–∫–∞–ª—ã

`;

  Object.entries(analysis.balance_distribution).forEach(([balance, count]) => {
    const label = balance > 0 ? '–°–æ–ª–∞—Ä–Ω—ã–π' : balance < 0 ? '–õ—É–Ω–∞—Ä–Ω—ã–π' : '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π';
    report += `- **${balance}** (${label}): ${count} —Ä–µ—à–µ–Ω–∏–π\n`;
  });
  
  report += `
## –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã —Ä–µ—à–µ–Ω–∏–π

${analysis.common_themes.map(theme => `- ${theme}`).join('\n')}

## –≠–≤–æ–ª—é—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π

`;

  analysis.decision_evolution.forEach(evolution => {
    report += `### ${evolution.date} (${evolution.turn_id})
- **–ë–∞–ª–∞–Ω—Å**: ${evolution.balance}
- **–ö–æ–Ω—Ç–µ–∫—Å—Ç**: ${evolution.context_summary}

`;
  });
  
  report += `
## –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π

`;

  decisions.forEach((decision, index) => {
    if (decision.options) {
      report += `### ${decision.turn_id} (${decision.date || 'N/A'})
**–ë–∞–ª–∞–Ω—Å**: ${decision.balance}
**–ö–æ–Ω—Ç–µ–∫—Å—Ç**: ${decision.context}

**–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏–π:**
`;
      
      decision.options.forEach(option => {
        report += `#### ${option.title}
**–î–µ–π—Å—Ç–≤–∏—è**: ${option.actions}
**–†–µ–∑—É–ª—å—Ç–∞—Ç**: ${option.result}

`;
      });
    }
  });
  
  fs.writeFileSync(reportPath, report, 'utf-8');
  console.log(`üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: ${reportPath}`);
}

// –ó–∞–ø—É—Å–∫
main(); 