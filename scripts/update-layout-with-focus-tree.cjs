const admin = require('firebase-admin');
const fs = require('fs');
const path = require('path');

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
const serviceAccount = require('../serviceAccountKey.json');
const focusTreeFile = path.join(__dirname, 'presidential_focus_tree.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase Admin
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();

async function updateLayoutWithFocusTree() {
  console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ layout —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –¥—Ä–µ–≤–∞ —Ñ–æ–∫—É—Å–æ–≤...');
  
  try {
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ–∫—É—Å–æ–≤
    const focusTreeData = JSON.parse(fs.readFileSync(focusTreeFile, 'utf8'));
    const focusNodes = focusTreeData.focus_tree_nodes;
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–æ–∫—É—Å–æ–≤ –¥–ª—è layout: ${focusNodes.length}`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π layout –∏–∑ Firestore
    const layoutCollection = db.collection('layout');
    const layoutDocs = await layoutCollection.get();
    
    let currentLayout = [];
    if (!layoutDocs.empty) {
      currentLayout = layoutDocs.docs.map(doc => doc.data());
      console.log(`üìã –¢–µ–∫—É—â–∏–π layout —Å–æ–¥–µ—Ä–∂–∏—Ç ${currentLayout.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π layout —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Ñ–æ–∫—É—Å–æ–≤
    const newLayout = [
      // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã layout (–µ—Å–ª–∏ –µ—Å—Ç—å)
      ...currentLayout,
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è –¥—Ä–µ–≤–∞ —Ñ–æ–∫—É—Å–æ–≤
      {
        id: 'focus_tree_section',
        type: 'focus_tree',
        title: '–î—Ä–µ–≤–æ –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –§–æ–∫—É—Å–æ–≤',
        description: '–†–µ—à–µ–Ω–∏—è –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—É—Ä—Å—ã',
        position: {
          x: 0,
          y: 0,
          width: 12,
          height: 8
        },
        config: {
          show_connections: true,
          show_effects: true,
          show_metadata: true,
          auto_layout: true
        },
        metadata: {
          total_focuses: focusNodes.length,
          categories: ['presidential_decisions'],
          periods: focusNodes.map(f => f.metadata?.period).filter(Boolean),
          last_updated: new Date().toISOString()
        }
      },
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ–∫—É—Å–∞
      {
        id: 'current_focus_widget',
        type: 'current_focus',
        title: '–¢–µ–∫—É—â–∏–π –§–æ–∫—É—Å',
        description: '–ê–∫—Ç–∏–≤–Ω—ã–π –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–∫—É—Å',
        position: {
          x: 12,
          y: 0,
          width: 4,
          height: 4
        },
        config: {
          show_effects: true,
          show_progress: true,
          show_next_focus: true
        }
      },
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ñ–æ–∫—É—Å–æ–≤
      {
        id: 'focus_history_widget',
        type: 'focus_history',
        title: '–ò—Å—Ç–æ—Ä–∏—è –§–æ–∫—É—Å–æ–≤',
        description: '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ñ–æ–∫—É—Å—ã',
        position: {
          x: 12,
          y: 4,
          width: 4,
          height: 4
        },
        config: {
          show_completed: true,
          show_effects_summary: true,
          max_items: 10
        }
      }
    ];
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π layout
    console.log('üóëÔ∏è  –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ layout...');
    for (const doc of layoutDocs.docs) {
      await doc.ref.delete();
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π layout
    console.log('üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ layout...');
    for (let i = 0; i < newLayout.length; i++) {
      await layoutCollection.doc(String(i)).set({
        ...newLayout[i],
        uploaded_at: admin.firestore.FieldValue.serverTimestamp()
      });
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —ç–ª–µ–º–µ–Ω—Ç layout: ${newLayout[i].title || newLayout[i].id} (${i})`);
    }
    
    console.log(`üéâ Layout —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ ${newLayout.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    
    // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ layout
    const layoutMetadata = {
      total_elements: newLayout.length,
      last_updated: admin.firestore.FieldValue.serverTimestamp(),
      version: '2.0',
      description: 'Layout —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –¥—Ä–µ–≤–∞ –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ñ–æ–∫—É—Å–æ–≤',
      includes_focus_tree: true,
      focus_tree_elements: newLayout.filter(item => item.type && item.type.includes('focus')).length
    };
    
    await db.collection('layout_metadata').doc('current').set(layoutMetadata);
    console.log('üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ layout –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ layout:', error);
    process.exit(1);
  }
  
  console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ layout –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫
updateLayoutWithFocusTree(); 