const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
function extractEntities(text) {
  const entities = {
    people: [],
    organizations: [],
    locations: [],
    events: [],
    concepts: []
  };

  // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Å –ø–æ–º–æ—â—å—é NLP)
  const peoplePatterns = [
    /([–ê-–Ø][–∞-—è]+ [–ê-–Ø][–∞-—è]+)/g,
    /([–ê-–Ø][–∞-—è]+ [–ê-–Ø]\. [–ê-–Ø]\.)/g
  ];

  const organizationPatterns = [
    /(–§–°–ë|–ú–í–î|–ú–ß–°|–ú–ò–î|–ê–ü|–°–æ–≤–µ—Ç –§–µ–¥–µ—Ä–∞—Ü–∏–∏|–ì–æ—Å–¥—É–º–∞|–ö—Ä–µ–º–ª—å|–†–æ—Å—Ç–µ—Ö|–ù–§–ë|–ß–í–ö|–ú–∞—Ä—Å)/g,
    /(–ú–∏–Ω—ç–∫–æ–Ω–æ–º—Ä–∞–∑–≤–∏—Ç–∏—è|–ú–∏–Ω–æ–±–æ—Ä–æ–Ω—ã|–ú–∏–Ω—Ñ–∏–Ω|–ú–∏–Ω—Ç—Ä–∞–Ω—Å|–ú–∏–Ω–æ–±—Ä–Ω–∞—É–∫–∏)/g
  ];

  const locationPatterns = [
    /(–ú–æ—Å–∫–≤–∞|–ü–µ—Ç–µ—Ä–±—É—Ä–≥|–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫|–ü—Ä–∏–º–æ—Ä—å–µ|–ö–∞–≤–∫–∞–∑|–ß–µ—á–Ω—è|–î–∞–≥–µ—Å—Ç–∞–Ω|–ò–Ω–≥—É—à–µ—Ç–∏—è|–£–∫—Ä–∞–∏–Ω–∞|–°–ù–ì|–ê–°–ï–ê–ù)/g,
    /(–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫|–°–µ–≤–µ—Ä–Ω—ã–π –ö–∞–≤–∫–∞–∑|–°—Ä–µ–¥–Ω—è—è –ê–∑–∏—è)/g
  ];

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª—é–¥–µ–π
  peoplePatterns.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      entities.people.push(...matches.filter(match => match.length > 3));
    }
  });

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
  organizationPatterns.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      entities.organizations.push(...matches);
    }
  });

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–π
  locationPatterns.forEach(pattern => {
    const matches = text.match(pattern);
    if (matches) {
      entities.locations.push(...matches);
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  Object.keys(entities).forEach(key => {
    entities[key] = [...new Set(entities[key])];
  });

  return entities;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
function analyzeSentiment(text, successScore) {
  const positiveWords = ['—É—Å–ø–µ—à–Ω–æ', '—É–¥–∞–ª–æ—Å—å', '–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ', '—É–∫—Ä–µ–ø–ª–µ–Ω–æ', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–æ', '–æ–¥–æ–±—Ä–µ–Ω–æ'];
  const negativeWords = ['–ø—Ä–æ–≤–∞–ª', '–Ω–µ—É–¥–∞—á–∞', '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ', '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ', '—Å–æ—Ä–≤–∞–ª–æ—Å—å', '–ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å'];
  
  const textLower = text.toLowerCase();
  let positiveCount = 0;
  let negativeCount = 0;

  positiveWords.forEach(word => {
    if (textLower.includes(word)) positiveCount++;
  });

  negativeWords.forEach(word => {
    if (textLower.includes(word)) negativeCount++;
  });

  // –£—á–∏—Ç—ã–≤–∞–µ–º success_score
  if (successScore >= 15) positiveCount += 2;
  else if (successScore <= 5) negativeCount += 2;

  if (positiveCount > negativeCount) return 'positive';
  else if (negativeCount > positiveCount) return 'negative';
  else return 'neutral';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º
function extractThemes(text, tags) {
  const themes = [];
  const textLower = text.toLowerCase();
  
  const themePatterns = {
    'politics': ['–ø–æ–ª–∏—Ç–∏–∫–∞', '–∞–ø–ø–∞—Ä–∞—Ç', '–∫—Ä–µ–º–ª—å', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ'],
    'economy': ['—ç–∫–æ–Ω–æ–º–∏–∫–∞', '—Ñ–∏–Ω–∞–Ω—Å—ã', '–±–∞–Ω–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–±–∏–∑–Ω–µ—Å', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'],
    'security': ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–§–°–ë', '–ú–í–î', '–æ–ø–µ—Ä–∞—Ü–∏—è', '–∞–Ω—Ç–∏—Ç–µ—Ä—Ä–æ—Ä', '—Å–∏–ª–æ–≤–∏–∫–∏'],
    'diplomacy': ['–¥–∏–ø–ª–æ–º–∞—Ç–∏—è', '–ú–ò–î', '–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ', '–≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞'],
    'infrastructure': ['–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '—Ä–∞–∑–≤–∏—Ç–∏–µ'],
    'education': ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–≤—É–∑', '–Ω–∞—É–∫–∞', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è'],
    'culture': ['–∫—É–ª—å—Ç—É—Ä–∞', '–º—É–∑–µ–π', '–∏—Å—Ç–æ—Ä–∏—è', '–¥—É—Ö–æ–≤–Ω–æ—Å—Ç—å']
  };

  Object.entries(themePatterns).forEach(([theme, keywords]) => {
    const relevance = keywords.reduce((score, keyword) => {
      return score + (textLower.includes(keyword) ? 1 : 0);
    }, 0);

    if (relevance > 0) {
      themes.push({
        theme,
        relevance: Math.min(relevance / keywords.length, 1.0)
      });
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º—ã –∏–∑ —Ç–µ–≥–æ–≤
  tags.forEach(tag => {
    const tagLower = tag.toLowerCase();
    Object.entries(themePatterns).forEach(([theme, keywords]) => {
      if (keywords.some(keyword => tagLower.includes(keyword))) {
        const existingTheme = themes.find(t => t.theme === theme);
        if (existingTheme) {
          existingTheme.relevance = Math.min(existingTheme.relevance + 0.3, 1.0);
        } else {
          themes.push({ theme, relevance: 0.5 });
        }
      }
    });
  });

  return themes.sort((a, b) => b.relevance - a.relevance);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤
function createChunks(text, actionId) {
  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10);
  const chunks = [];
  let currentChunk = '';
  let chunkId = 1;

  sentences.forEach(sentence => {
    const sentenceWithPunctuation = sentence.trim() + '.';
    
    if ((currentChunk + sentenceWithPunctuation).length > 500) {
      if (currentChunk.trim()) {
        chunks.push({
          chunk_id: `${actionId}_chunk_${chunkId}`,
          content: currentChunk.trim(),
          tokens_estimate: Math.ceil(currentChunk.length / 4),
          entities: extractEntities(currentChunk),
          sentiment: analyzeSentiment(currentChunk, 0)
        });
        chunkId++;
      }
      currentChunk = sentenceWithPunctuation;
    } else {
      currentChunk += ' ' + sentenceWithPunctuation;
    }
  });

  if (currentChunk.trim()) {
    chunks.push({
      chunk_id: `${actionId}_chunk_${chunkId}`,
      content: currentChunk.trim(),
      tokens_estimate: Math.ceil(currentChunk.length / 4),
      entities: extractEntities(currentChunk),
      sentiment: analyzeSentiment(currentChunk, 0)
    });
  }

  return chunks;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
function analyzeComplexity(text, successScore) {
  const wordCount = text.split(/\s+/).length;
  const sentenceCount = text.split(/[.!?]+/).length - 1;
  const avgWordsPerSentence = wordCount / sentenceCount;
  
  let complexity = 'low';
  if (wordCount > 100 || avgWordsPerSentence > 20 || successScore > 15) {
    complexity = 'high';
  } else if (wordCount > 50 || avgWordsPerSentence > 15) {
    complexity = 'medium';
  }

  return complexity;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
function extractKeyPoints(text, result) {
  const keyPoints = [];
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const resultSentences = result.split(/[.!?]+/).filter(s => s.trim().length > 10);
  resultSentences.forEach(sentence => {
    const trimmed = sentence.trim();
    if (trimmed.length > 20 && trimmed.length < 100) {
      keyPoints.push(trimmed);
    }
  });

  return keyPoints.slice(0, 3); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç—Ä–µ–º—è –∫–ª—é—á–µ–≤—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è
function optimizeAction(action) {
  const optimized = {
    action_id: action.id,
    turn_id: action.turn,
    character: action.character,
    metadata: {
      title: action.title,
      date: action.date,
      success_score: action.success_score,
      word_count: action.text.split(/\s+/).length,
      complexity_score: analyzeComplexity(action.text, action.success_score),
      sentiment_overall: analyzeSentiment(action.text + ' ' + action.result, action.success_score)
    },
    content: {
      description: action.text,
      result: action.result,
      tags: action.tags,
      chunks: createChunks(action.text + ' ' + action.result, action.id),
      key_points: extractKeyPoints(action.text, action.result)
    },
    indexes: {
      entities: extractEntities(action.text + ' ' + action.result),
      themes: extractThemes(action.text + ' ' + action.result, action.tags),
      success_level: action.success_score >= 15 ? 'high' : action.success_score >= 10 ? 'medium' : 'low'
    },
    analysis: {
      success_analysis: action.success_score >= 15 ? 'successful' : action.success_score >= 10 ? 'partial' : 'failed',
      impact_scope: action.text.includes('—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π') || action.text.includes('–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π') ? 'federal' : 'local',
      risk_level: action.success_score <= 5 ? 'high' : action.success_score <= 10 ? 'medium' : 'low',
      strategic_value: action.text.includes('—Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π') || action.text.includes('–∫–ª—é—á–µ–≤–æ–π') ? 'high' : 'medium'
    }
  };

  return optimized;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π
function processActionsFile(inputPath, outputPath) {
  console.log('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–µ–π—Å—Ç–≤–∏–π...');
  
  const inputData = fs.readFileSync(inputPath, 'utf8');
  const lines = inputData.trim().split('\n');
  const actions = [];
  
  lines.forEach((line, index) => {
    try {
      const action = JSON.parse(line);
      actions.push(action);
    } catch (error) {
      console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ ${index + 1}:`, error.message);
    }
  });

  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${actions.length} –¥–µ–π—Å—Ç–≤–∏–π`);

  const optimizedActions = actions.map(action => optimizeAction(action));
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
  const outputData = optimizedActions.map(action => JSON.stringify(action)).join('\n');
  fs.writeFileSync(outputPath, outputData);
  
  console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${outputPath}`);
  
  return {
    total_actions: actions.length,
    processed_actions: optimizedActions.length,
    output_path: outputPath
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ
function createQualityReport(actions) {
  const report = {
    total_actions: actions.length,
    characters: {},
    turns: {},
    success_distribution: { high: 0, medium: 0, low: 0 },
    sentiment_distribution: { positive: 0, neutral: 0, negative: 0 },
    theme_distribution: {},
    entity_coverage: { people: 0, organizations: 0, locations: 0 },
    processing_date: new Date().toISOString()
  };

  actions.forEach(action => {
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º
    const character = action.character;
    report.characters[character] = (report.characters[character] || 0) + 1;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ö–æ–¥–∞–º
    const turn = action.turn_id;
    report.turns[turn] = (report.turns[turn] || 0) + 1;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    const successLevel = action.indexes.success_level;
    report.success_distribution[successLevel]++;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
    const sentiment = action.metadata.sentiment_overall;
    report.sentiment_distribution[sentiment]++;

    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–º–∞–º
    action.indexes.themes.forEach(theme => {
      report.theme_distribution[theme.theme] = (report.theme_distribution[theme.theme] || 0) + 1;
    });

    // –ü–æ–∫—Ä—ã—Ç–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π
    Object.keys(action.indexes.entities).forEach(entityType => {
      const count = action.indexes.entities[entityType].length;
      report.entity_coverage[entityType] += count;
    });
  });

  return report;
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  processActionsFile,
  optimizeAction,
  createQualityReport,
  extractEntities,
  analyzeSentiment,
  extractThemes
};

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length < 2) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node optimize-actions-structure.cjs <input_file> <output_file>');
    process.exit(1);
  }

  const [inputPath, outputPath] = args;
  
  try {
    const result = processActionsFile(inputPath, outputPath);
    console.log('üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:', result);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ
    const inputData = fs.readFileSync(outputPath, 'utf8');
    const actions = inputData.trim().split('\n').map(line => JSON.parse(line));
    const qualityReport = createQualityReport(actions);
    
    const reportPath = outputPath.replace('.jsonl', '_quality_report.json');
    fs.writeFileSync(reportPath, JSON.stringify(qualityReport, null, 2));
    console.log(`üìä –û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${reportPath}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error.message);
    process.exit(1);
  }
} 