import './style.css';
import { openDetailsModal } from '../../modal.js';
import { addTooltipEvents } from '../../components/Tooltip.js';

const NODE_WIDTH = 180;
const NODE_HEIGHT = 180;
const GRID_GAP_X = 240;
const GRID_GAP_Y = 240;
const PADDING = 20;

export default function FocusTreeWidget(props) {
  const { focus_tree, completed_focuses } = props;
  const container = document.createElement('div');
  container.className = 'focus-tree-container';
  const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
  svg.classList.add('focus-tree-svg');
  const nodeCenters = {};
  
  console.log('--- –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• –í–ù–£–¢–†–ò FOCUSTREE ---');
  console.log('–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ñ–æ–∫—É—Å—ã (–º–∞—Å—Å–∏–≤):', completed_focuses);
  console.log('–í—Å–µ–≥–æ —Ñ–æ–∫—É—Å–æ–≤ –≤ –¥–µ—Ä–µ–≤–µ:', Object.keys(focus_tree).length);

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –¥–µ—Ä–µ–≤–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ SVG
  let maxX = 0;
  let maxY = 0;
  for (const focusId in focus_tree) {
    const focusData = focus_tree[focusId];
    const nodeRight = focusData.x * GRID_GAP_X + PADDING + NODE_WIDTH;
    const nodeBottom = focusData.y * GRID_GAP_Y + PADDING + NODE_HEIGHT;
    if (nodeRight > maxX) {
      maxX = nodeRight;
    }
    if (nodeBottom > maxY) {
      maxY = nodeBottom;
    }
  }
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã SVG –¥–ª—è –≤—Å–µ—Ö —Ñ–æ–∫—É—Å–æ–≤
  const svgWidth = Math.max(maxX + PADDING, 100 * window.innerWidth / 100);
  const svgHeight = Math.max(maxY + PADDING, 70 * window.innerHeight / 100);
  svg.setAttribute('width', `${svgWidth}px`);
  svg.setAttribute('height', `${svgHeight}px`);
  
  console.log(`üìè –†–∞–∑–º–µ—Ä—ã SVG —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: ${svgWidth}px (—à–∏—Ä–∏–Ω–∞) x ${svgHeight}px (–≤—ã—Å–æ—Ç–∞)`);

  // –°–æ–∑–¥–∞–µ–º –≤—Å–µ —É–∑–ª—ã –∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏—Ö —Ü–µ–Ω—Ç—Ä—ã
  for (const focusId in focus_tree) {
    const isCompleted = completed_focuses.includes(focusId);
    console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–∫—É—Å: ID='${focusId}'. –ù–∞–π–¥–µ–Ω –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö? ${isCompleted ? '–î–ê' : '–ù–ï–¢'}`);
    const focusData = focus_tree[focusId];
    const left = focusData.x * GRID_GAP_X + PADDING;
    const top = focusData.y * GRID_GAP_Y + PADDING;
    nodeCenters[focusId] = { x: left + NODE_WIDTH / 2, y: top + NODE_HEIGHT / 2 };
    
    console.log(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–æ–∫—É—Å–∞ "${focusData.title}": (${left}, ${top}) -> —Ü–µ–Ω—Ç—Ä: (${nodeCenters[focusId].x}, ${nodeCenters[focusId].y})`);
    
    const node = document.createElement('div');
    node.className = 'focus-node';
    node.style.left = `${left}px`;
    node.style.top = `${top}px`;
    if (completed_focuses.includes(focusId)) {
      node.classList.add('completed');
    }
    node.innerHTML = `<img src="${focusData.icon_path}" alt="${focusData.title}">`;
    
    // 1. –£–±–∏—Ä–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ç—É–ª—Ç–∏–ø–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    addTooltipEvents(node, focusData.title, null, null);

    node.addEventListener('click', () => {
      // 2. –í–º–µ—Å—Ç–æ –∑–∞–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ, –º–∞–ª–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      const content = document.createElement('div');
      content.className = 'focus-details-content';
      content.innerHTML = `
        <div class="focus-details-header">
          <img src="${focusData.icon_path}" alt="${focusData.title}">
          <h2>${focusData.title}</h2>
        </div>
        <p>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${focusData.duration} –¥–Ω–µ–π</p>
        <hr>
        <p>${focusData.description}</p>
      `;
      
      openDetailsModal(focusData.title, content);
    });
    container.appendChild(node);
  }

  // –°—Ç—Ä–æ–∏–º –ª–∏–Ω–∏–∏ –º–µ–∂–¥—É –≤—Å–µ–º–∏ —Ñ–æ–∫—É—Å–∞–º–∏
  console.log('üîó –°—Ç—Ä–æ–∏–º —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏...');
  let linesCreated = 0;
  
  for (const focusId in focus_tree) {
    const focusData = focus_tree[focusId];
    if (!focusData.prerequisites || focusData.prerequisites.length === 0) {
      console.log(`‚ö†Ô∏è –§–æ–∫—É—Å "${focusData.title}" –Ω–µ –∏–º–µ–µ—Ç prerequisites`);
      continue;
    }
    
    const childCenter = nodeCenters[focusId];
    focusData.prerequisites.forEach(prereqId => {
      const parentCenter = nodeCenters[prereqId];
      if (childCenter && parentCenter) {
        const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
        const startX = parentCenter.x;
        const startY = parentCenter.y + NODE_HEIGHT / 2; // –ù–∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–∑–ª–∞
        const endX = childCenter.x;
        const endY = childCenter.y - NODE_HEIGHT / 2; // –í–µ—Ä—Ö –¥–æ—á–µ—Ä–Ω–µ–≥–æ —É–∑–ª–∞
        
        // Y-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        const midY = startY + (endY - startY) / 2;

        const d = `M ${startX} ${startY} V ${midY} H ${endX} V ${endY}`;
        
        path.setAttribute('d', d);

        if (completed_focuses.includes(focusId) && completed_focuses.includes(prereqId)) {
          path.classList.add('completed');
        }
        svg.appendChild(path);
        linesCreated++;
        console.log(`‚úÖ –û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞: "${focus_tree[prereqId]?.title}" -> "${focusData.title}"`);
      } else {
        console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ª–∏–Ω–∏—é –¥–ª—è "${focusData.title}":`, {
          childCenter: !!childCenter,
          parentCenter: !!parentCenter,
          prereqId
        });
      }
    });
  }
  
  console.log(`üéØ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ –ª–∏–Ω–∏–π: ${linesCreated}`);

  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è, —Ä–µ—à–∞—é—â–∞—è –ø—Ä–æ–±–ª–µ–º—É —Å –∑–∞–∫—Ä—ã—Ç–∏–µ–º
  let isMouseDown = false;
  let isDragging = false;
  let startX, startY, scrollLeft, scrollTop;

  const onMouseDown = (e) => {
    // –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É
    if (e.button !== 0) return;
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–∞ –ø–æ–ª–æ—Å–∞—Ö –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    if (e.clientX >= container.clientWidth || e.clientY >= container.clientHeight) {
        return;
    }
    
    isMouseDown = true;
    isDragging = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –Ω–∞—á–∞–ª–µ
    container.classList.add('grabbing');
    
    startX = e.pageX - container.offsetLeft;
    startY = e.pageY - container.offsetTop;
    scrollLeft = container.scrollLeft;
    scrollTop = container.scrollTop;
    
    window.addEventListener('mousemove', onMouseMove);
    window.addEventListener('mouseup', onMouseUp);
  };

  const onMouseMove = (e) => {
    if (!isMouseDown) return;
    e.preventDefault();
    isDragging = true; // –õ—é–±–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ–º

    const x = e.pageX - container.offsetLeft;
    const y = e.pageY - container.offsetTop;
    const walkX = (x - startX) * 2;
    const walkY = (y - startY) * 2;
    container.scrollLeft = scrollLeft - walkX;
    container.scrollTop = scrollTop - walkY;
  };

  const onMouseUp = () => {
    isMouseDown = false;
    container.classList.remove('grabbing');

    window.removeEventListener('mousemove', onMouseMove);
    window.removeEventListener('mouseup', onMouseUp);

    // –ï—Å–ª–∏ –±—ã–ª–æ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ, –Ω—É–∂–Ω–æ "—Å—ä–µ—Å—Ç—å" —Å–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫
    if (isDragging) {
        const preventClick = (evt) => {
            evt.stopPropagation();
            window.removeEventListener('click', preventClick, true);
        };
        window.addEventListener('click', preventClick, true);
    }
  };

  container.addEventListener('mousedown', onMouseDown);

  container.insertBefore(svg, container.firstChild);
  return container;
}